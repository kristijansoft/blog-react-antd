{"version":3,"sources":["components/Directory/index.js","../node_modules/codemirror/mode lazy /^/.*/.js$/ groupOptions: {} namespace object","components/Documents/FreeCodeCamp/16.js"],"names":["index","props","bindHandleScroll","event","scrollTop","srcElement","documentElement","window","pageYOffset","body","setState","scrollToAnchor","anchorName","anchorElement","document","getElementById","scrollIntoView","block","behavior","state","articleTree","getArticleTree","bind","childrens","getElementsByClassName","children","i","len","length","nodeName","id","innerText","push","name","tag","this","pathSnippets","location","pathname","split","filter","TOTAL_DATA","getElementsByTagName","innerHTML","section","title","setTitle","header","before","scrollY","directory","offsetTop","addEventListener","onscroll","footer","H","offsetParent","s","offsetHeight","style","after","className","removeEventListener","array","targetObj","targetIndex","findIndex","n","map","key","paddingLeft","onClick","Component","withRouter","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","all","slice","t","keys","Object","module","exports","codeMirrorOptions","theme","mode","readOnly","value","options","minWidth","wordBreak"],"mappings":"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B,IAAIoE,EAAM,CACT,eAAgB,CACf,GACA,KAED,6BAA8B,CAC7B,GACA,KAED,mBAAoB,CACnB,GACA,KAED,yBAA0B,CACzB,GACA,KAED,2BAA4B,CAC3B,GACA,KAED,mBAAoB,CACnB,GACA,GAED,uBAAwB,CACvB,GACA,KAED,mBAAoB,CACnB,GACA,KAED,mBAAoB,CACnB,GACA,KAED,iCAAkC,CACjC,GACA,KAED,6BAA8B,CAC7B,GACA,KAED,uBAAwB,CACvB,GACA,KAED,eAAgB,CACf,GACA,GAED,qBAAsB,CACrB,GACA,KAED,WAAY,CACX,GACA,KAED,iBAAkB,CACjB,GACA,EACA,KAED,iBAAkB,CACjB,GACA,KAED,qBAAsB,CACrB,GACA,EACA,EACA,IAED,6BAA8B,CAC7B,GACA,KAED,eAAgB,CACf,GACA,KAED,mBAAoB,CACnB,GACA,KAED,iBAAkB,CACjB,GACA,KAED,eAAgB,CACf,GACA,KAED,qBAAsB,CACrB,GACA,KAED,eAAgB,CACf,GACA,KAED,qBAAsB,CACrB,GACA,KAED,qBAAsB,CACrB,GACA,KAED,eAAgB,CACf,GACA,KAED,mBAAoB,CACnB,GACA,KAED,uBAAwB,CACvB,GACA,KAED,eAAgB,CACf,GACA,KAED,eAAgB,CACf,GACA,GACA,KAED,uBAAwB,CACvB,GACA,KAED,aAAc,CACb,GACA,KAED,qBAAsB,CACrB,GACA,KAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,6BAA8B,CAC7B,GACA,KAED,yCAA0C,CACzC,IACA,KAED,uBAAwB,CACvB,GACA,KAED,iBAAkB,CACjB,IACA,KAED,iCAAkC,CACjC,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,GACA,EACA,EACA,KAED,iBAAkB,CACjB,IACA,KAED,eAAgB,CACf,IACA,KAED,6BAA8B,CAC7B,GACA,GAED,qBAAsB,CACrB,IACA,KAED,eAAgB,CACf,IACA,EACA,KAED,mBAAoB,CACnB,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,eAAgB,CACf,IACA,KAED,yBAA0B,CACzB,GACA,IAED,+BAAgC,CAC/B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,YAAa,CACZ,IAED,iBAAkB,CACjB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,aAAc,CACb,IACA,KAED,qBAAsB,CACrB,IACA,KAED,mBAAoB,CACnB,IACA,EACA,KAED,iBAAkB,CACjB,IACA,KAED,eAAgB,CACf,IACA,EACA,EACA,EACA,KAED,eAAgB,CACf,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,yBAA0B,CACzB,IACA,KAED,eAAgB,CACf,GACA,EACA,EACA,IAED,qBAAsB,CACrB,IACA,KAED,qBAAsB,CACrB,GACA,KAED,WAAY,CACX,IACA,KAED,WAAY,CACX,IACA,KAED,eAAgB,CACf,IACA,KAED,eAAgB,CACf,IACA,IAED,iBAAkB,CACjB,GACA,KAED,iBAAkB,CACjB,IACA,KAED,eAAgB,CACf,IACA,KAED,iBAAkB,CACjB,GACA,EACA,KAED,qBAAsB,CACrB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,iBAAkB,CACjB,IACA,EACA,EACA,IAED,2BAA4B,CAC3B,IACA,KAED,qBAAsB,CACrB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,eAAgB,CACf,IACA,EACA,EACA,KAED,qBAAsB,CACrB,IACA,KAED,+BAAgC,CAC/B,IACA,KAED,eAAgB,CACf,IACA,KAED,iBAAkB,CACjB,GACA,KAED,qBAAsB,CACrB,GACA,IAED,mBAAoB,CACnB,IACA,KAED,eAAgB,CACf,IACA,KAED,uBAAwB,CACvB,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,iBAAkB,CACj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","file":"static/js/29.40e0a80f.chunk.js","sourcesContent":["//文档右侧标题导航\r\nimport React, { Component } from 'react';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { TOTAL_DATA } from \"../../assets/data\";\r\nimport \"./index.less\";\r\n\r\nclass index extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            articleTree: [],\r\n            scrollTop: null\r\n        }\r\n        this.getArticleTree = this.getArticleTree.bind(this);\r\n    }\r\n    getArticleTree() {\r\n        let childrens = document.getElementsByClassName(\"article-content\")[0].children;\r\n        let articleTree = [];\r\n        for (let i = 0, len = childrens.length; i < len - 1; i++) {\r\n            let nodeName = childrens[i].nodeName;\r\n            if (nodeName === \"H2\" || nodeName === \"H3\") {\r\n                childrens[i].id = childrens[i].innerText;\r\n                articleTree.push({\r\n                    name: childrens[i].innerText,\r\n                    tag: childrens[i].nodeName\r\n                });\r\n            }\r\n        }\r\n        this.setState({ articleTree });\r\n    }\r\n    setTitle() {\r\n        let path = this.props.location.pathname;\r\n        const pathSnippets = path.split('/').filter(i => i);\r\n        for (let i = 0, len = TOTAL_DATA.length; i < len; i++) {\r\n            if (pathSnippets[0] === TOTAL_DATA[i].name) {\r\n                document.getElementsByTagName(\"h1\")[0].innerHTML = TOTAL_DATA[i].section.length > 0 ? TOTAL_DATA[i].section[pathSnippets[pathSnippets.length - 1]] : TOTAL_DATA[i].title;\r\n            }\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        //获取文档标题树\r\n        this.getArticleTree();\r\n        this.setTitle();\r\n        //页面滚动到文档末尾时，将directory逐渐向上隐藏\r\n        let header = document.getElementById(\"header\");\r\n        let before = window.scrollY;\r\n        let directory = document.getElementsByClassName(\"directory-list\")[0];\r\n        //offsetTop为页面加载时directory距顶端的距离\r\n        let offsetTop = directory.offsetTop;\r\n        window.addEventListener('scroll', this.bindHandleScroll);\r\n        window.onscroll = function () {\r\n            let footer = document.getElementsByClassName(\"page-footer\")[0], H = 0;\r\n            while (footer) {\r\n                //H为footer距顶端的距离\r\n                H += footer.offsetTop;\r\n                footer = footer.offsetParent;\r\n            }\r\n            let s = document.body.scrollTop || document.documentElement.scrollTop;\r\n            //s为当前滚动距离加offsetTop加directory高度,即directory底端距顶部的距离\r\n            s = s + (offsetTop + directory.offsetHeight);\r\n            //当s超出H时,directory向上收起\r\n            if (s > H + header.offsetHeight) {\r\n                directory.style = `position:fixed;top:${offsetTop - s + H}px;transition:none`;\r\n            } else {\r\n                // 在s<=H时,若向下滚动时,滚动距离超过header高度将header收起;向上滚动则将header显示,并且directory随header平移\r\n                let after = window.scrollY;\r\n                if (after > header.offsetHeight) {\r\n                    if (before < after) {\r\n                        header.className = \"ant-layout-header header header-affixed\";\r\n                        directory.className = \"directory-list directory-affixed\"\r\n                        before = after;\r\n                    };\r\n                    if (before > after) {\r\n                        header.className = \"ant-layout-header header header-visible\";\r\n                        directory.className = \"directory-list\"\r\n                        before = after;\r\n                    };\r\n                }\r\n                directory.style = \"\";\r\n            }\r\n        }\r\n    }\r\n    //获取滚动条滚动的高度\r\n    bindHandleScroll = (event) => {\r\n        const scrollTop = (event.srcElement ? event.srcElement.documentElement.scrollTop : false)\r\n            || window.pageYOffset\r\n            || (event.srcElement ? event.srcElement.body.scrollTop : 0);\r\n        this.setState({ scrollTop });\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.bindHandleScroll);\r\n    }\r\n    //点击directory跳转到锚点\r\n    scrollToAnchor = (anchorName) => {\r\n        if (anchorName) {\r\n            let anchorElement = document.getElementById(anchorName);\r\n            if (anchorElement) {\r\n                anchorElement.scrollIntoView({\r\n                    block: 'start',\r\n                    behavior: 'smooth'\r\n                });\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        let { articleTree, scrollTop } = this.state;\r\n        let length = articleTree.length;\r\n        if (document.getElementById(`tree-num-0`) && length > 0) {\r\n            let array = [];\r\n            //array内为所有锚点的offsetTop,从小到大排列\r\n            for (let i = 0; i < length; i++) {\r\n                let targetObj = document.getElementById(articleTree[i].name);\r\n                array.push(targetObj.offsetTop);\r\n            }\r\n            //targetIndex为array中第一个大于当前滚动距离的值的index,通过offsetTop判断当前滚动到哪个锚点,并改变对应的标题导航样式。\r\n            let targetIndex = array.findIndex(n => n > scrollTop) - 1;\r\n            for (let i = 0; i < length; i++) {\r\n                i === targetIndex ? document.getElementById(`tree-num-${i}`).className = \"tree-num directory-item-active\" : document.getElementById(`tree-num-${i}`).className = \"tree-num\";\r\n            }\r\n            //当滚动距离超过最后一个锚点时,array中找不到,返回-1\r\n            if (targetIndex === -2) {\r\n                document.getElementById(`tree-num-${length - 1}`).className = \"tree-num directory-item-active\";\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"directory\">\r\n                <ul className=\"directory-list\">\r\n                    {articleTree.map((key, index) =>\r\n                        <li key={index} id={`tree-num-${index}`} className=\"tree-num\" title={key.name} style={{ paddingLeft: key.tag === \"H2\" ? 10 : 22 }} onClick={() => { this.scrollToAnchor(`${key.name}`) }}>{key.name}</li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(index);","var map = {\n\t\"./apl/apl.js\": [\n\t\t68,\n\t\t120\n\t],\n\t\"./asciiarmor/asciiarmor.js\": [\n\t\t69,\n\t\t121\n\t],\n\t\"./asn.1/asn.1.js\": [\n\t\t70,\n\t\t122\n\t],\n\t\"./asterisk/asterisk.js\": [\n\t\t71,\n\t\t123\n\t],\n\t\"./brainfuck/brainfuck.js\": [\n\t\t72,\n\t\t124\n\t],\n\t\"./clike/clike.js\": [\n\t\t55,\n\t\t9\n\t],\n\t\"./clojure/clojure.js\": [\n\t\t73,\n\t\t125\n\t],\n\t\"./cmake/cmake.js\": [\n\t\t74,\n\t\t126\n\t],\n\t\"./cobol/cobol.js\": [\n\t\t75,\n\t\t127\n\t],\n\t\"./coffeescript/coffeescript.js\": [\n\t\t56,\n\t\t128\n\t],\n\t\"./commonlisp/commonlisp.js\": [\n\t\t76,\n\t\t129\n\t],\n\t\"./crystal/crystal.js\": [\n\t\t77,\n\t\t130\n\t],\n\t\"./css/css.js\": [\n\t\t48,\n\t\t3\n\t],\n\t\"./cypher/cypher.js\": [\n\t\t78,\n\t\t131\n\t],\n\t\"./d/d.js\": [\n\t\t79,\n\t\t132\n\t],\n\t\"./dart/dart.js\": [\n\t\t80,\n\t\t9,\n\t\t133\n\t],\n\t\"./diff/diff.js\": [\n\t\t81,\n\t\t134\n\t],\n\t\"./django/django.js\": [\n\t\t82,\n\t\t2,\n\t\t3,\n\t\t92\n\t],\n\t\"./dockerfile/dockerfile.js\": [\n\t\t83,\n\t\t106\n\t],\n\t\"./dtd/dtd.js\": [\n\t\t84,\n\t\t135\n\t],\n\t\"./dylan/dylan.js\": [\n\t\t85,\n\t\t136\n\t],\n\t\"./ebnf/ebnf.js\": [\n\t\t86,\n\t\t137\n\t],\n\t\"./ecl/ecl.js\": [\n\t\t87,\n\t\t138\n\t],\n\t\"./eiffel/eiffel.js\": [\n\t\t88,\n\t\t139\n\t],\n\t\"./elm/elm.js\": [\n\t\t89,\n\t\t140\n\t],\n\t\"./erlang/erlang.js\": [\n\t\t90,\n\t\t141\n\t],\n\t\"./factor/factor.js\": [\n\t\t91,\n\t\t107\n\t],\n\t\"./fcl/fcl.js\": [\n\t\t92,\n\t\t142\n\t],\n\t\"./forth/forth.js\": [\n\t\t93,\n\t\t143\n\t],\n\t\"./fortran/fortran.js\": [\n\t\t94,\n\t\t144\n\t],\n\t\"./gas/gas.js\": [\n\t\t95,\n\t\t145\n\t],\n\t\"./gfm/gfm.js\": [\n\t\t96,\n\t\t76,\n\t\t105\n\t],\n\t\"./gherkin/gherkin.js\": [\n\t\t97,\n\t\t146\n\t],\n\t\"./go/go.js\": [\n\t\t98,\n\t\t147\n\t],\n\t\"./groovy/groovy.js\": [\n\t\t99,\n\t\t148\n\t],\n\t\"./haml/haml.js\": [\n\t\t100,\n\t\t2,\n\t\t3,\n\t\t95\n\t],\n\t\"./handlebars/handlebars.js\": [\n\t\t57,\n\t\t101\n\t],\n\t\"./haskell-literate/haskell-literate.js\": [\n\t\t101,\n\t\t110\n\t],\n\t\"./haskell/haskell.js\": [\n\t\t58,\n\t\t149\n\t],\n\t\"./haxe/haxe.js\": [\n\t\t102,\n\t\t150\n\t],\n\t\"./htmlembedded/htmlembedded.js\": [\n\t\t103,\n\t\t2,\n\t\t3,\n\t\t91\n\t],\n\t\"./htmlmixed/htmlmixed.js\": [\n\t\t47,\n\t\t2,\n\t\t3,\n\t\t111\n\t],\n\t\"./http/http.js\": [\n\t\t104,\n\t\t151\n\t],\n\t\"./idl/idl.js\": [\n\t\t105,\n\t\t152\n\t],\n\t\"./javascript/javascript.js\": [\n\t\t49,\n\t\t2\n\t],\n\t\"./jinja2/jinja2.js\": [\n\t\t106,\n\t\t153\n\t],\n\t\"./jsx/jsx.js\": [\n\t\t107,\n\t\t2,\n\t\t112\n\t],\n\t\"./julia/julia.js\": [\n\t\t108,\n\t\t154\n\t],\n\t\"./livescript/livescript.js\": [\n\t\t109,\n\t\t155\n\t],\n\t\"./lua/lua.js\": [\n\t\t110,\n\t\t156\n\t],\n\t\"./markdown/markdown.js\": [\n\t\t63,\n\t\t76\n\t],\n\t\"./mathematica/mathematica.js\": [\n\t\t111,\n\t\t157\n\t],\n\t\"./mbox/mbox.js\": [\n\t\t112,\n\t\t158\n\t],\n\t\"./meta.js\": [\n\t\t53\n\t],\n\t\"./mirc/mirc.js\": [\n\t\t113,\n\t\t159\n\t],\n\t\"./mllike/mllike.js\": [\n\t\t114,\n\t\t160\n\t],\n\t\"./modelica/modelica.js\": [\n\t\t115,\n\t\t161\n\t],\n\t\"./mscgen/mscgen.js\": [\n\t\t116,\n\t\t162\n\t],\n\t\"./mumps/mumps.js\": [\n\t\t117,\n\t\t163\n\t],\n\t\"./nginx/nginx.js\": [\n\t\t118,\n\t\t164\n\t],\n\t\"./nsis/nsis.js\": [\n\t\t119,\n\t\t108\n\t],\n\t\"./ntriples/ntriples.js\": [\n\t\t120,\n\t\t165\n\t],\n\t\"./octave/octave.js\": [\n\t\t121,\n\t\t166\n\t],\n\t\"./oz/oz.js\": [\n\t\t122,\n\t\t167\n\t],\n\t\"./pascal/pascal.js\": [\n\t\t123,\n\t\t168\n\t],\n\t\"./pegjs/pegjs.js\": [\n\t\t124,\n\t\t2,\n\t\t169\n\t],\n\t\"./perl/perl.js\": [\n\t\t125,\n\t\t170\n\t],\n\t\"./php/php.js\": [\n\t\t126,\n\t\t2,\n\t\t3,\n\t\t9,\n\t\t102\n\t],\n\t\"./pig/pig.js\": [\n\t\t127,\n\t\t171\n\t],\n\t\"./powershell/powershell.js\": [\n\t\t128,\n\t\t172\n\t],\n\t\"./properties/properties.js\": [\n\t\t129,\n\t\t173\n\t],\n\t\"./protobuf/protobuf.js\": [\n\t\t130,\n\t\t174\n\t],\n\t\"./pug/pug.js\": [\n\t\t64,\n\t\t2,\n\t\t3,\n\t\t75\n\t],\n\t\"./puppet/puppet.js\": [\n\t\t131,\n\t\t175\n\t],\n\t\"./python/python.js\": [\n\t\t59,\n\t\t176\n\t],\n\t\"./q/q.js\": [\n\t\t132,\n\t\t177\n\t],\n\t\"./r/r.js\": [\n\t\t133,\n\t\t178\n\t],\n\t\"./rpm/rpm.js\": [\n\t\t134,\n\t\t179\n\t],\n\t\"./rst/rst.js\": [\n\t\t135,\n\t\t94\n\t],\n\t\"./ruby/ruby.js\": [\n\t\t51,\n\t\t180\n\t],\n\t\"./rust/rust.js\": [\n\t\t136,\n\t\t109\n\t],\n\t\"./sas/sas.js\": [\n\t\t137,\n\t\t181\n\t],\n\t\"./sass/sass.js\": [\n\t\t61,\n\t\t3,\n\t\t182\n\t],\n\t\"./scheme/scheme.js\": [\n\t\t138,\n\t\t183\n\t],\n\t\"./shell/shell.js\": [\n\t\t139,\n\t\t184\n\t],\n\t\"./sieve/sieve.js\": [\n\t\t140,\n\t\t185\n\t],\n\t\"./slim/slim.js\": [\n\t\t141,\n\t\t2,\n\t\t3,\n\t\t96\n\t],\n\t\"./smalltalk/smalltalk.js\": [\n\t\t142,\n\t\t186\n\t],\n\t\"./smarty/smarty.js\": [\n\t\t143,\n\t\t187\n\t],\n\t\"./solr/solr.js\": [\n\t\t144,\n\t\t188\n\t],\n\t\"./soy/soy.js\": [\n\t\t145,\n\t\t2,\n\t\t3,\n\t\t103\n\t],\n\t\"./sparql/sparql.js\": [\n\t\t146,\n\t\t189\n\t],\n\t\"./spreadsheet/spreadsheet.js\": [\n\t\t147,\n\t\t190\n\t],\n\t\"./sql/sql.js\": [\n\t\t148,\n\t\t191\n\t],\n\t\"./stex/stex.js\": [\n\t\t60,\n\t\t192\n\t],\n\t\"./stylus/stylus.js\": [\n\t\t65,\n\t\t77\n\t],\n\t\"./swift/swift.js\": [\n\t\t149,\n\t\t193\n\t],\n\t\"./tcl/tcl.js\": [\n\t\t150,\n\t\t194\n\t],\n\t\"./textile/textile.js\": [\n\t\t151,\n\t\t195\n\t],\n\t\"./tiddlywiki/tiddlywiki.js\": [\n\t\t152,\n\t\t196\n\t],\n\t\"./tiki/tiki.js\": [\n\t\t153,\n\t\t197\n\t],\n\t\"./toml/toml.js\": [\n\t\t154,\n\t\t198\n\t],\n\t\"./tornado/tornado.js\": [\n\t\t155,\n\t\t2,\n\t\t3,\n\t\t93\n\t],\n\t\"./troff/troff.js\": [\n\t\t156,\n\t\t199\n\t],\n\t\"./ttcn-cfg/ttcn-cfg.js\": [\n\t\t158,\n\t\t200\n\t],\n\t\"./ttcn/ttcn.js\": [\n\t\t157,\n\t\t201\n\t],\n\t\"./turtle/turtle.js\": [\n\t\t159,\n\t\t202\n\t],\n\t\"./twig/twig.js\": [\n\t\t160,\n\t\t104\n\t],\n\t\"./vb/vb.js\": [\n\t\t161,\n\t\t203\n\t],\n\t\"./vbscript/vbscript.js\": [\n\t\t162,\n\t\t204\n\t],\n\t\"./velocity/velocity.js\": [\n\t\t163,\n\t\t205\n\t],\n\t\"./verilog/verilog.js\": [\n\t\t164,\n\t\t206\n\t],\n\t\"./vhdl/vhdl.js\": [\n\t\t165,\n\t\t207\n\t],\n\t\"./vue/vue.js\": [\n\t\t166,\n\t\t2,\n\t\t3,\n\t\t77,\n\t\t75,\n\t\t88\n\t],\n\t\"./webidl/webidl.js\": [\n\t\t167,\n\t\t208\n\t],\n\t\"./xml/xml.js\": [\n\t\t46,\n\t\t209\n\t],\n\t\"./xquery/xquery.js\": [\n\t\t168,\n\t\t210\n\t],\n\t\"./yacas/yacas.js\": [\n\t\t169,\n\t\t211\n\t],\n\t\"./yaml-frontmatter/yaml-frontmatter.js\": [\n\t\t170,\n\t\t113\n\t],\n\t\"./yaml/yaml.js\": [\n\t\t62,\n\t\t212\n\t],\n\t\"./z80/z80.js\": [\n\t\t171,\n\t\t213\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 67;\nmodule.exports = webpackAsyncContext;","import React, { Component } from 'react';\r\nimport Directory from \"../../Directory\";\r\nimport CodeMirror from '@uiw/react-codemirror';\r\nimport 'codemirror/theme/monokai.css';\r\n\r\nlet codeMirrorOptions = {\r\n    theme: 'monokai',\r\n    mode: 'JS',\r\n    readOnly: true,\r\n};\r\n\r\nlet code1 = `/ab+c/i;\r\nnew RegExp('ab+c', 'i');\r\nnew RegExp(/ab+c/, 'i');`;\r\nlet code2 = `var re = new RegExp(\"\\\\\\\\w+\");\r\nvar re = /\\\\w+/;`;\r\n\r\nexport default class index extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"page-content\">\r\n                <div className=\"article\">\r\n                    <div className=\"article-title\">\r\n                        <h1>正则表达式</h1>\r\n                    </div>\r\n                    <div className=\"article-content\">\r\n                        <h2>概述</h2>\r\n                        <p>RegExp 构造函数创建了一个正则表达式对象，用于将文本与一个模式匹配。</p>\r\n                        <h2>语法</h2>\r\n                        <h3>参数</h3>\r\n                        <p><b>pattern</b></p>\r\n                        <p className=\"indent-2\">正则表达式的文本。</p>\r\n                        <p><b>flags</b></p>\r\n                        <p className=\"indent-2\">如果指定，标志可以具有以下值的任意组合：</p>\r\n                        <div style={{ paddingLeft: \"2em\" }}>\r\n                            <p><b>g</b></p>\r\n                            <p className=\"indent-2\">全局匹配;找到所有匹配，而不是在第一个匹配后停止</p>\r\n                            <p><b>i</b></p>\r\n                            <p className=\"indent-2\">忽略大小写</p>\r\n                            <p><b>m</b></p>\r\n                            <p className=\"indent-2\">多行; 将开始和结束字符（^ 和 $）视为在多行上工作（也就是，分别匹配每一行的开始和结束（由 \\n 或 \\r 分割），而不只是只匹配整个输入字符串的最开始和最末尾处。</p>\r\n                            <p><b>u</b></p>\r\n                            <p className=\"indent-2\">Unicode; 将模式视为 Unicode 序列点的序列</p>\r\n                            <p><b>y</b></p>\r\n                            <p className=\"indent-2\">粘性匹配; 仅匹配目标字符串中此正则表达式的 lastIndex 属性指示的索引(并且不尝试从任何后续的索引匹配)。</p>\r\n                            <p><b>s</b></p>\r\n                            <p className=\"indent-2\">dotAll 模式，匹配任何字符（包括终止符 '\\n'）。</p>\r\n                        </div>\r\n                        <h2>描述</h2>\r\n                        <p>有两种方法来创建一个 RegExp 对象：一是字面量、二是构造函数。要指示字符串，字面量的参数不使用引号，而构造函数的参数使用引号。因此，以下表达式创建相同的正则表达式：</p>\r\n                        <CodeMirror value={code1} options={codeMirrorOptions} />\r\n                        <p>当表达式被赋值时，字面量形式提供正则表达式的编译（compilation）状态，当正则表达式保持为常量时使用字面量。例如当你在循环中使用字面量构造一个正则表达式时，正则表达式不会在每一次迭代中都被重新编译（recompiled）。</p>\r\n                        <p>而正则表达式对象的构造函数，如 new RegExp('ab+c') 提供了正则表达式运行时编译（runtime compilation）。如果你知道正则表达式模式将会改变，或者你事先不知道什么模式，而是从另一个来源获取，如用户输入，这些情况都可以使用构造函数。</p>\r\n                        <p>从 ECMAScript 6开始，当第一个参数为正则表达式而第二个标志参数存在时，new RegExp(/ab+c/, 'i')不再抛出 TypeError （“当从其他正则表达式进行构造时不支持标志”）的异常，取而代之，将使用这些参数创建一个新的正则表达式。</p>\r\n                        <p>当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \\）。比如，以下是等价的：</p>\r\n                        <CodeMirror value={code2} options={codeMirrorOptions} />\r\n                        <h2>正则表达式中特殊字符的含义</h2>\r\n                        <h3>字符类别（Character Classes）</h3>\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>字符</th>\r\n                                    <th>含义</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"no-break\">\r\n                                <tr>\r\n                                    <td><code>.</code></td>\r\n                                    <td>\r\n                                        <p>(点号，小数点) 匹配任意单个字符，但是行结束符除外：<code>\\n</code>&nbsp;<code>\\r</code>&nbsp;<code>\\u2028</code>&nbsp;或&nbsp;<code>\\u2029</code>。</p>\r\n                                        <p>在字符集中，点( . )失去其特殊含义，并匹配一个字面点( . )。</p>\r\n                                        <p>需要注意的是，<code>m</code>&nbsp;多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用<code>[^]</code>&nbsp;（当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符。</p>\r\n                                        <p>例如，<code>/.y/</code>&nbsp;匹配 \"yes make my day\" 中的&nbsp;\"my\" 和 \"ay\"，但是不匹配 \"yes\"。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\d</code></td>\r\n                                    <td>\r\n                                        <p>匹配任意阿拉伯数字。等价于<code>[0-9]</code>。</p>\r\n                                        <p>例如，<code>/\\d/</code>&nbsp;或&nbsp;<code>/[0-9]/</code>&nbsp;匹配 \"B2 is the suite number.\" 中的&nbsp;'2'。&nbsp;</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\D</code></td>\r\n                                    <td>\r\n                                        <p>匹配任意一个不是阿拉伯数字的字符。等价于<code>[^0-9]</code>。</p>\r\n                                        <p>例如，<code>/\\D/</code>&nbsp;或&nbsp;<code>/[^0-9]/</code>&nbsp;匹配 \"B2 is the suite number.\" 中的&nbsp;'B'。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\w</code></td>\r\n                                    <td>\r\n                                        <p>匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于&nbsp;<code>[A-Za-z0-9_]</code>。</p>\r\n                                        <p>例如，<code>/\\w/</code>&nbsp;匹配 \"apple\" 中的 'a'，\"$5.28\" 中的 '5' 和 \"3D\" 中的 '3'。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\W</code></td>\r\n                                    <td>\r\n                                        <p>匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于&nbsp;<code>[^A-Za-z0-9_]</code>。</p>\r\n                                        <p>例如，<code>/\\W/</code>&nbsp;或&nbsp;<code>/[^A-Za-z0-9_]/</code>&nbsp;匹配 \"50%\" 中的 '%'。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\s</code></td>\r\n                                    <td>\r\n                                        <p>匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。</p>\r\n                                        <p>等价于&nbsp;<code>[ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​​\\u202f\\u205f​ \\u3000]。</code></p>\r\n                                        <p>例如&nbsp;<code>/\\s\\w*/</code>&nbsp;匹配 \"foo bar\" 中的 ' bar'。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\S</code></td>\r\n                                    <td>\r\n                                        <p>匹配一个非空白符。等价于&nbsp;<code><code>[^ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​&nbsp;\\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​\\u202f\\u205f​\\u3000]</code></code>。</p>\r\n                                        <p>例如，<code>/\\S\\w*/</code>&nbsp;匹配 \"foo bar\" 中的 'foo'。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\t</code></td>\r\n                                    <td>匹配一个水平制表符（tab）</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\r</code></td>\r\n                                    <td>匹配一个回车符（carriage return）</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\n</code></td>\r\n                                    <td>匹配一个换行符（linefeed）</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\v</code></td>\r\n                                    <td>匹配一个垂直制表符（vertical tab）</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\f</code></td>\r\n                                    <td>匹配一个换页符（form-feed）</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>[\\b]</code></td>\r\n                                    <td>匹配一个退格符（backspace）（不要与&nbsp;<code>\\b</code>&nbsp;混淆）</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\0</code></td>\r\n                                    <td>匹配一个 NUL 字符。不要在此后面跟小数点。</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\c<em>X</em></code></td>\r\n                                    <td>\r\n                                        <p><code><em>X</em></code>&nbsp;是 A - Z 的一个字母。匹配字符串中的一个控制字符。</p>\r\n                                        <p>例如，<code>/\\cM/</code>&nbsp;匹配字符串中的 control-M。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\x<em>hh</em></code></td>\r\n                                    <td>匹配编码为&nbsp;<code><em>hh</em></code>&nbsp;（两个十六进制数字）的字符。</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\u<em>hhhh</em></code></td>\r\n                                    <td>匹配 Unicode 值为&nbsp;<code><em>hhhh</em></code>&nbsp;（四个十六进制数字）的字符。</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\</code></td>\r\n                                    <td>\r\n                                        <p>对于那些通常被认为字面意义的字符来说，表示下一个字符具有特殊用处，并且不会被按照字面意义解释。</p>\r\n                                        <p>例如&nbsp;<code>/b/</code>&nbsp;匹配字符 'b'。在 b 前面加上一个反斜杠，即使用&nbsp;<code>/\\b/</code>，则该字符变得特殊，以为这匹配一个单词边界。</p>\r\n                                        <p><em>或</em></p>\r\n                                        <p>对于那些通常特殊对待的字符，表示下一个字符不具有特殊用途，会被按照字面意义解释。</p>\r\n                                        <p>例如，* 是一个特殊字符，表示匹配某个字符 0 或多次，如&nbsp;<code>/a*/</code>&nbsp;意味着 0 或多个 \"a\"。 为了匹配字面意义上的&nbsp;<code>*</code>&nbsp;，在它前面加上一个反斜杠，例如，<code>/a\\*/</code>匹配 'a*'。</p>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <h3>字符集合（Character Sets）</h3>\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>字符</th>\r\n                                    <th>含义</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"no-break\">\r\n                                <tr>\r\n                                    <td><code>[xyz]</code></td>\r\n                                    <td>\r\n                                        <p>一个字符集合，也叫字符组。匹配集合中的任意一个字符。你可以使用连字符'-'指定一个范围。</p>\r\n                                        <p>例如，[abcd] 等价于 [a-d]，匹配\"brisket\"中的'b'和\"chop\"中的'c'。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>[^xyz]</code></td>\r\n                                    <td>\r\n                                        <p>一个反义或补充字符集，也叫反义字符组。也就是说，它匹配任意不在括号内的字符。你也可以通过使用连字符 '-' 指定一个范围内的字符。</p>\r\n                                        <p>例如，<code>[^abc]</code>&nbsp;等价于&nbsp;<code>[^a-c]。</code>&nbsp;第一个匹配的是 \"bacon\" 中的'o' 和 \"chop\" 中的 'h'。</p>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <h3>边界（Boundaries）</h3>\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>字符</th>\r\n                                    <th>含义</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"no-break\">\r\n                                <tr>\r\n                                    <td><code>^</code></td>\r\n                                    <td>\r\n                                        <p>匹配输入开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。</p>\r\n                                        <p>例如，<code>/^A/</code>&nbsp;不匹配 \"an A\" 中的 \"A\"，但匹配 \"An A\" 中的 \"A\"。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>$</code></td>\r\n                                    <td>\r\n                                        <p>匹配输入结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。</p>\r\n                                        <p>例如，<code>/t$/</code>&nbsp;不匹配 \"eater\" 中的 \"t\"，但匹配 \"eat\" 中的 \"t\"。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\b</code></td>\r\n                                    <td>\r\n                                        <p>匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和&nbsp;<code>[\\b]</code>&nbsp;混淆）</p>\r\n                                        <p>例如，<code>/\\bno/</code>&nbsp;匹配 \"at noon\" 中的 \"no\"，<code>/ly\\b/</code>&nbsp;匹配 \"possibly yesterday.\" 中的 \"ly\"。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\B</code></td>\r\n                                    <td>\r\n                                        <p>匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。</p>\r\n                                        <p>例如，<code>/\\Bon/</code>&nbsp;匹配 \"at noon\" 中的 \"on\"，<code>/ye\\B/</code>&nbsp;匹配 \"possibly yesterday.\" 中的 \"ye\"。</p>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <h3>分组（Grouping）与反向引用（back references）</h3>\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>字符</th>\r\n                                    <th>含义</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"no-break\">\r\n                                <tr>\r\n                                    <td><code>(<em>x</em>)</code></td>\r\n                                    <td>\r\n                                        <p>匹配&nbsp;<code><em>x</em></code>&nbsp;并且捕获匹配项。 这被称为捕获括号（capturing parentheses）。</p>\r\n                                        <p>例如，<code>/(foo)/</code>&nbsp;匹配且捕获 \"foo bar.\" 中的 \"foo\"。被匹配的子字符串可以在结果数组的元素&nbsp;<code>[1], ..., [n]</code>&nbsp;中找到，或在被定义的&nbsp;<code>RegExp</code>&nbsp;对象的属性&nbsp;<code>$1, ..., $9</code>&nbsp;中找到。</p>\r\n                                        <p>捕获组（Capturing groups）有性能惩罚。如果不需再次访问被匹配的子字符串，最好使用非捕获括号（non-capturing parentheses），见下面。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>\\<em>n</em></code></td>\r\n                                    <td>\r\n                                        <p><code><em>n</em></code>&nbsp;是一个正整数。一个反向引用（back reference），指向正则表达式中第 n 个括号（从左开始数）中匹配的子字符串。</p>\r\n                                        <p>例如，<code>{`/apple(,)\\\\sorange\\\\1/`}</code>&nbsp;匹配 \"apple, orange, cherry, peach.\" 中的 \"apple,orange,\"。一个更全面的例子在该表格下面。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>(?:<em>x</em>)</code></td>\r\n                                    <td>匹配&nbsp;<code><em>x</em></code>&nbsp;不会捕获匹配项。这被称为非捕获括号（non-capturing parentheses）。匹配项不能够从结果数组的元素&nbsp;<code>[1], ..., [n]</code>&nbsp;或已被定义的&nbsp;<code>RegExp</code>&nbsp;对象的属性&nbsp;<code>$1, ..., $9</code>&nbsp;再次访问到。</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <h3>数量词（Quantifiers）</h3>\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>字符</th>\r\n                                    <th>含义</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"no-break\">\r\n                                <tr>\r\n                                    <td style={{ minWidth: 84 }}><code><em>x</em>*</code></td>\r\n                                    <td>\r\n                                        <p>匹配前面的模式&nbsp;<em>x</em>&nbsp;0 或多次。</p>\r\n                                        <p>例如，<code>/bo*/</code>&nbsp;匹配 \"A ghost booooed\" 中的 \"boooo\"，\"A bird warbled\" 中的 \"b\"，但是不匹配 \"A goat grunted\"。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code><em>x</em>+</code></td>\r\n                                    <td>\r\n                                        <p>匹配前面的模式&nbsp;<em>x</em>&nbsp;1 或多次。等价于&nbsp;<code>{\"{\"}1,{\"}\"}</code>。</p>\r\n                                        <p>例如，<code>/a+/</code>&nbsp;匹配 \"candy\" 中的 \"a\"，\"caaaaaaandy\" 中所有的 \"a\"。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code><em>x</em>*?</code><br /><code><em>x</em>+?</code></td>\r\n                                    <td>\r\n                                        <p>像上面的 * 和 + 一样匹配前面的模式&nbsp;<em>x</em>，然而匹配是最小可能匹配。</p>\r\n                                        <p>例如，<code>/\".*?\"/</code>&nbsp;匹配 '\"foo\" \"bar\"' 中的 '\"foo\"'，而 * 后面没有 ? 时匹配 '\"foo\" \"bar\"'。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code><em>x</em>?</code></td>\r\n                                    <td>\r\n                                        <p>匹配前面的模式&nbsp;<em>x</em>&nbsp;0 或 1 次。</p>\r\n                                        <p>例如，<code>/e?le?/</code>&nbsp;匹配 \"angel\" 中的 \"el\"，\"angle\" 中的 \"le\"。</p>\r\n                                        <p>如果在数量词&nbsp;<code>*</code>、<code>+</code>、<code>?</code>&nbsp;或&nbsp;<code>{\"{}\"}</code>, 任意一个后面紧跟该符号（?），会使数量词变为非贪婪（ non-greedy） ，即匹配次数最小化。反之，默认情况下，是贪婪的（greedy），即匹配次数最大化。</p>\r\n                                        <p>在使用于向前断言（lookahead assertions）时，见该表格中&nbsp;<code>(?=)、</code><code>(?!)</code>&nbsp;和&nbsp;<code>(?:)</code>&nbsp;的说明。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code><em>x</em>|<em>y</em></code></td>\r\n                                    <td>\r\n                                        <p>匹配&nbsp;<code><em>x</em></code>&nbsp;或&nbsp;<code><em>y</em></code></p>\r\n                                        <p>例如，<code>/green|red/</code>&nbsp;匹配 \"green apple\" 中的 ‘green'，\"red apple.\" 中的 'red'。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code><em>x</em>{\"{\"}<em>n</em>{\"}\"}</code></td>\r\n                                    <td>\r\n                                        <p><code><em>n</em></code>&nbsp;是一个正整数。前面的模式 <em>x</em>&nbsp;连续出现 n 次时匹配。</p>\r\n                                        <p>例如，<code>/a{\"{\"}2{\"}\"}/</code>&nbsp;不匹配 \"candy,\" 中的 \"a\"，但是匹配 \"caandy,\" 中的两个 \"a\"，且匹配 \"caaandy.\" 中的前两个 \"a\"。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code><em>x</em>\\{\"{\"}<em>n</em>,{\"}\"}</code></td>\r\n                                    <td>\r\n                                        <p><code><em>n</em></code>&nbsp;是一个正整数。前面的模式&nbsp;<em>x</em>&nbsp;连续出现至少 n 次时匹配。</p>\r\n                                        <p>例如，<code>/a{\"{\"}2,{\"}\"}/</code>&nbsp;不匹配 \"candy\" 中的 \"a\"，但是匹配 \"caandy\" 和 \"caaaaaaandy.\" 中所有的 \"a\"。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code><em>x</em>{\"{\"}<em>n</em>, <em>m</em>{\"}\"}</code></td>\r\n                                    <td>\r\n                                        <p><code><em>n</em></code>&nbsp;和&nbsp;<code><em>m</em></code>&nbsp;为正整数。前面的模式 x 连续出现至少 n 次，至多 m 次时匹配。</p>\r\n                                        <p>例如，<code>/a{\"{\"}1, 3{\"}\"}/</code>&nbsp;不匹配 \"cndy\"，匹配 \"candy,\" 中的 \"a\"，\"caandy,\" 中的两个 \"a\"，匹配 \"caaaaaaandy\" 中的前面三个 \"a\"。注意，当匹配 \"caaaaaaandy\" 时，即使原始字符串拥有更多的 \"a\"，匹配项也是 \"aaa\"。</p>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <h3>断言（Assertions），下面所有断言均只匹配 x, y 不参与匹配</h3>\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>字符</th>\r\n                                    <th>含义</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"no-break\">\r\n                                <tr>\r\n                                    <td style={{ minWidth: 84 }}><code><em>x</em>(?=<em>y</em>)</code></td>\r\n                                    <td>\r\n                                        <p>仅匹配被y跟随的x。</p>\r\n                                        <p>举个例子，<code>/Jack(?=Sprat)/</code>，如果\"Jack\"后面跟着sprat，则匹配之。</p>\r\n                                        <p><code>/Jack(?=Sprat|Frost)/</code>&nbsp;，如果\"Jack\"后面跟着\"Sprat\"或者\"Frost\"，则匹配之。但是，\"Sprat\" 和\"Frost\" 都不会在匹配结果中出现。</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code><em>x</em>(?!<em>y</em>)</code></td>\r\n                                    <td>\r\n                                        <p>仅匹配不被y跟随的x。</p>\r\n                                        <p>举个例子，<code>/\\d+(?!\\.)/</code> 只会匹配不被点（.）跟随的数字。<br />\r\n                                            <code>/\\d+(?!\\.)/.exec('3.141')&nbsp;</code>匹配\"141\"，而不是\"3.141\"</p>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>(?&lt;=<em>y</em>)x</code></td>\r\n                                    <td><code>x</code>只有在<code>y</code>后面才匹配。<br />\r\n                                        <code>/(?&lt;=\\$)\\d+/.exec('Benjamin Franklin is on the $100 bill') &nbsp;// [\"100\"]</code></td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><code>(?&lt;!<em>y</em>)x</code></td>\r\n                                    <td><code>x</code>只有不在<code>y</code>后面才匹配。<br />\r\n                                        <code>/(?&lt;!\\$)\\d+/.exec('it’s is worth about €90') // [\"90\"]</code></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <p style={{wordBreak:\"break-word\"}}><b>^</b>等价于:[\\t\\n\\v\\f\\r\\u00a0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000]</p>\r\n                        <h3>属性</h3>\r\n                        <p><b>RegExp.prototype</b></p>\r\n                        <p className=\"indent-2\">允许为所有正则对象添加属性。</p>\r\n                        <p><b>RegExp.length</b></p>\r\n                        <p className=\"indent-2\">RegExp.length 值为 2。</p>\r\n                        <h2>RegExp 实例</h2>\r\n                        <h3>属性</h3>\r\n                        <p>注意，RegExp 对象的几个属性既有完整的长属性名，也有对应的类 Perl 的短属性名。两个属性都有着同样的值。JavaScript 的正则语法就是基于 Perl 的。</p>\r\n                        <p><b>RegExp.prototype.constructor</b></p>\r\n                        <p className=\"indent-2\">创建该正则对象的构造函数。</p>\r\n                        <p><b>RegExp.prototype.global</b></p>\r\n                        <p className=\"indent-2\">是否开启全局匹配，也就是匹配目标字符串中所有可能的匹配项，而不是只进行第一次匹配。</p>\r\n                        <p><b>RegExp.prototype.ignoreCase</b></p>\r\n                        <p className=\"indent-2\">在匹配字符串时是否要忽略字符的大小写。</p>\r\n                        <p><b>RegExp.prototype.lastIndex</b></p>\r\n                        <p className=\"indent-2\">下次匹配开始的字符串索引位置。</p>\r\n                        <p><b>RegExp.prototype.multiline</b></p>\r\n                        <p className=\"indent-2\">是否开启多行模式匹配（影响 ^ 和 $ 的行为）。</p>\r\n                        <p><b>RegExp.prototype.source</b></p>\r\n                        <p className=\"indent-2\">正则对象的源模式文本。</p>\r\n                        <p><b>RegExp.prototype.sticky</b></p>\r\n                        <p className=\"indent-2\">是否开启粘滞匹配。</p>\r\n                        <h3>方法</h3>\r\n                        <p><b>RegExp.prototype.exec()</b></p>\r\n                        <p className=\"indent-2\">在目标字符串中执行一次正则匹配操作。</p>\r\n                        <p><b>RegExp.prototype.test()</b></p>\r\n                        <p className=\"indent-2\">测试当前正则是否能匹配目标字符串。</p>\r\n                        <p><b>RegExp.prototype.toSource()</b></p>\r\n                        <p className=\"indent-2\">返回一个字符串，其值为该正则对象的字面量形式。覆盖了 Object.prototype.toSource 方法.</p>\r\n                        <p><b>RegExp.prototype.toString()</b></p>\r\n                        <p className=\"indent-2\">返回一个字符串，其值为该正则对象的字面量形式。覆盖了 Object.prototype.toString()方法。</p>\r\n                        <p></p>\r\n                        <p></p>\r\n                    </div>\r\n                </div>\r\n                <Directory />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}